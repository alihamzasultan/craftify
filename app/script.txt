  <script>



    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox .chat-messages");
    const chatWindow = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input input");
    const sendChatBtn = document.querySelector(".send-btn");
    const voiceBtn = document.querySelector('.voice-btn');
    const formContainer = document.getElementById("form-container");
    const promptInput = document.querySelector(".chat-input");
    const userForm = document.getElementById("user-form");

  

    voiceBtn.addEventListener('click', startVoiceRecognition);
    function startVoiceRecognition() {
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;
    
            recognition.start();
    
            recognition.onresult = function (event) {
              const transcript = event.results[0][0].transcript;
              chatInput.value = transcript;
              sendMessage();
            };
    
            recognition.onerror = function (event) {
              console.error('Speech recognition error detected: ' + event.error);
            };
    
            recognition.onend = function () {
              console.log('Speech recognition service disconnected');
            };
          }
    // const regenerateBtn = document.querySelector(".regenerate-btn");
    let userMessage = null;
    let lastUserMessage = null;
    let generatingResponse = false;
    let abortController = null;
    let typingIndicator = null;

    const createChatLi = (message, className) => {
  const chatLi = document.createElement("li");
  chatLi.classList.add("chat", `${className}`);
  let chatContent;

  if (className === "outgoing") {
    chatContent = `<p></p><span class="material-symbols-outlined">person</span>`;
  } else {
    chatContent = `<img src="bee.gif" width="65px" class="bee-icon" style="margin-right: 10px;"/><p></p>`;
  }

  chatLi.innerHTML = chatContent;

  // Remove dashes from the message before setting the text
  const cleanedMessage = message.replace(/-\s*/g, "").trim();
  const messageElement = chatLi.querySelector("p");

  if (className !== "outgoing") {
    const beeIcon = chatLi.querySelector(".bee-icon");

    // Keep the GIF while the response is being written
    startTypingAnimation(messageElement, cleanedMessage, () => {
      // Once typing is finished, switch to static image
      beeIcon.src = "bee-static.png";
    });

    // Keep GIF while hovering
    chatLi.addEventListener("mouseenter", () => {
      beeIcon.src = "bee.gif";
    });

    // Switch back to static when not hovering
    chatLi.addEventListener("mouseleave", () => {
      beeIcon.src = "bee-static.png";
    });
  } else {
    messageElement.textContent = cleanedMessage;
  }

  return chatLi;
};


const generateResponse = async (chatElement) => {
    const messageElement = chatElement.querySelector("p");

    try {
        const response = await fetch('https://aibee-server-production.up.railway.app/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: userMessage })
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();

        messageElement.textContent = "";
        stopEllipsisAnimation();

        if (data.showForm) {
            // Display the form
            displayForm(); // Assuming you have a `displayForm` function
        } else {
            // Remove dashes from the AI's response
            const cleanedMessage = data.message.replace(/-\s*/g, "\n").trim();
            
            // Start typing animation with the cleaned message
            startTypingAnimation(messageElement, cleanedMessage);
        }

    } catch (error) {
        stopEllipsisAnimation();
        messageElement.classList.add("error");
        messageElement.textContent = "It Seems we will Require More information";
    }
};


function displayForm() {
    // Show the form
    document.getElementById('form-container').style.display = 'block';

    // Hide the input field
    document.querySelector('.chat-input').style.display = 'none';

    chatbot.classList.add('blurred');
}



document.getElementById('user-form').addEventListener('submit', (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const name = formData.get('name');
    const email = formData.get('email');
    console.log('Name:', name, 'Email:', email);

    // Submit the form data to your server or process it
});

    const speakResponse = (text) => {
      speechSynthesis.cancel(); // Stop any ongoing speech
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'en-US';
        utterance.rate = 1.1; // Adjust the rate as needed (0.1 to 10)
        speechSynthesis.speak(utterance);
    };


    const startTypingAnimation = (element, message) => {
      let currentIndex = 0;
      let currentText = "";
      let intervalId = setInterval(() => {
        if (currentIndex < message.length) {
          currentText += message[currentIndex];
          // Generate HTML dynamically here
          element.innerHTML = convertToHTML(currentText);
          currentIndex++;
        } else {
          clearInterval(intervalId);
        }
        // Ensure the chat window scrolls to the bottom
        chatWindow.scrollTop = chatWindow.scrollHeight;
      }, 1);
    };

    // Function to convert Markdown-style headings to HTML headings
    function convertHeadings(text) {
      return text.replace(/### (.*?)\n/g, '<h6>$1</h6>');
    }

    // Function to convert Markdown-style bold text to HTML bold tags
    function convertBold(text) {
      return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    }

    // Function to convert Markdown-style lists to HTML lists
    function convertLists(text) {
      return text.replace(/- (.*?)\n/g, '<li>$1</li>');
    }

    // Function to convert the entire content to HTML
    function convertToHTML(content) {
      let html = content;

      html = convertHeadings(html);
      html = convertBold(html);
      html = convertLists(html);

      // Convert remaining new lines to paragraphs
      html = html.replace(/\n\n/g, '</p><p>');
      html = '<p style="padding-top: 0px; margin-bottom: 0px;">' + html + '</p>';

      return html;
    }

    const handleChat = () => {
      userMessage = chatInput.value.trim();
      if (!userMessage) return;

      lastUserMessage = userMessage;
      chatInput.value = "";
      chatInput.style.height = `${inputInitHeight}px`;

      chatbox.appendChild(createChatLi(userMessage, "outgoing"));
      chatWindow.scrollTop = chatWindow.scrollHeight;

    

      // Show the beta preview message
    //   document.querySelector(".beta-preview-message").style.display = "block";

      setTimeout(() => {
        const incomingChatLi = createChatLi("", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatWindow.scrollTop = chatWindow.scrollHeight;
        startEllipsisAnimation(incomingChatLi.querySelector("p"));
        generateResponse(incomingChatLi);
      }, 600);
    };

    const regenerateResponse = () => {
      if (generatingResponse) {
        stopGenerating();
      } else {
        if (!lastUserMessage) return;
        userMessage = lastUserMessage;

        

        setTimeout(() => {
          const incomingChatLi = createChatLi("", "incoming");
          chatbox.appendChild(incomingChatLi);
          chatWindow.scrollTop = chatWindow.scrollHeight;
          startEllipsisAnimation(incomingChatLi.querySelector("p"));
          generateResponse(incomingChatLi);
        }, 600);
      }
    };

    // const stopGenerating = () => {
    //   if (abortController) {
    //     abortController.abort(); // Abort the fetch request
    //     generatingResponse = false;
    //     regenerateBtn.textContent = "Regenerate Response";
    //     stopEllipsisAnimation();
    //   }
    // };

    const startEllipsisAnimation = (parentElement) => {
      typingIndicator = document.createElement("div");
      typingIndicator.classList.add("typing-indicator");
      typingIndicator.innerHTML = '<span></span><span></span><span></span>';
      if (parentElement) parentElement.appendChild(typingIndicator);
    };

    const stopEllipsisAnimation = () => {
      if (typingIndicator) {
        typingIndicator.remove();
        typingIndicator = null;
      }
    };

    // Example usage: Add this logic where you start the animation
    document.addEventListener("DOMContentLoaded", () => {
      const ellipsisElement = document.querySelector(".ellipsis-container");
      startEllipsisAnimation(ellipsisElement);
    });


    chatInput.addEventListener("input", () => {
      chatInput.style.height = `${inputInitHeight}px`;
      chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    sendChatBtn.addEventListener("click", handleChat);
    chatInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleChat();
      }
    });

    // regenerateBtn.addEventListener("click", regenerateResponse);

    chatbotToggler.addEventListener("click", () => {
      document.body.classList.toggle("show-chatbot");
      toggleIcons();
    });

    closeBtn.addEventListener("click", () => {
      document.body.classList.remove("show-chatbot");
      toggleIcons();
    });

    const toggleIcons = () => {
      const logoIcon = document.querySelector(".chatbot-toggler img");
      const closeIcon = document.querySelector(
        ".chatbot-toggler span.material-symbols-outlined.close"
      );

      if (document.body.classList.contains("show-chatbot")) {
        logoIcon.style.display = "none";
        closeIcon.style.display = "block";
      } else {
        logoIcon.style.display = "block";
        closeIcon.style.display = "none";
      }
    };

    const inputInitHeight = chatInput.scrollHeight;

    document.addEventListener("DOMContentLoaded", () => {
        toggleIcons();
        speechSynthesis.cancel(); // Stop any ongoing speech on page refresh
    });
///////////////////////
////////////////////
///////////////////////

  
document.getElementById('submit-btn').addEventListener('click', () => {
    const name = document.getElementById('name').value.trim();
    const email = document.getElementById('email').value.trim();
    const description = document.getElementById('description').value.trim();

    if (!name || !email || !description) {
      alert('Please fill in all fields.');
      return;
    }

    const formData = {
      name: name,
      email: email,
      description: description,
    };

    // Sending data via POST request to your backend
    fetch('https://aibee-server-production.up.railway.app/send-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData),
    })
      .then((response) => {
        if (response.ok) {
          document.getElementById('success-message').style.display = 'block';
          document.getElementById('user-form').style.display = 'none';

          // Hide the form and success message after 3 seconds
          setTimeout(() => {
            document.getElementById('success-message').style.display = 'none';
            hideForm();
          }, 3000);
        } else {
          alert('Failed to send the message. Please try again later.');
        }
      })
      .catch((error) => {
        console.error('Error sending data:', error);
        alert('An error occurred. Please try again.');
      });
  });

  function hideForm() {
    // Hide the form
    document.getElementById('form-container').style.display = 'none';

    // Show the input field
    document.querySelector('.chat-input').style.display = 'flex'; // Restore input field
}

  </script>